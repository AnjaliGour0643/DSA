1. What is a Queue?

A queue is a data structure that can hold many elements.
A queue operates on a FIFO (First In First Out) basis, meaning elements are added at the back and removed from the front.

---------------------------------

2. Basic operations we can do on a queue are:

- Enqueue: Adds a new element to the queue.
- Dequeue: Removes and returns the first (front) element from the queue.
- Peek: Returns the first element in the queue.
- isEmpty: Checks if the queue is empty.
- Size: Finds the number of elements in the queue.

---------------------------------

3. Applications

- CPU Task Scheduling
- Print Spooling
- Handling Requests in Web Servers
- Breadth-First Search (BFS) in Graphs(Finding the shortest path in a graph like Google Maps' route finding)
- Buffering in Data Streams
- Task Queues in Multithreading

---------------------------------
*********************************

-> Reasons to implement queues using arrays:

1. Memory Efficient: Array elements do not hold the next elements address like linked list nodes do.
2. Easier to implement and understand: Using arrays to implement queues require less code than using linked lists, and for this reason it is typically easier to understand as well.

Reasons for not using arrays to implement queues:

1. Fixed size: An array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements. And resizing an array can be costly.
2. Shifting cost: Dequeue causes the first element in a queue to be removed, and the other elements must be shifted to take the removed elements' place. This is inefficient and can cause problems, especially if the queue is long.
3. Alternatives: Some programming languages have built-in data structures optimized for queue operations that are better than using arrays.